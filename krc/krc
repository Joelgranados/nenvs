#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-only


PWD=$(pwd)
KBUILD_ENVS="
KBUILD_BUILD_TIMESTAMP=0
KBUILD_BUILD_USER=\"user\"
KBUILD_BUILD_HOST=\"host\"
LOCALVERSION=\"\"
"
ENVS_GIT_REPO="github:Joelgranados/nix_envs"
BASENAME="$(basename "${BASH_SOURCE[0]}")"
USAGE="
Usage: ${BASENAME} [OPTIONS] <HOST> -- <COMMAND>

  Execute <COMMAND> in <HOST> through ssh connection.
  A mutagen session for PWD must exist.

HOST      Name of ssh-able host
COMMAND   Command to append

OPTIONS:
  -x, --cross-compile <ARCH>  Setup a cross-compilation environment for ARCH
                              just before executing <COMMAND>. Architecture
                              strings that work for Linux's ARCH argument should
                              work here.
  -e, --env <ENV>             Environment name under ${ENVS_GIT_REPO} to use
                              for the command. Valid values are kernel_base and
                              qemu_base. kernel_base is default.
  -v, --verbose               Increase verbosity
  --skip-wait                 Return immediately after calling flushing mutagen
                              and leave the session un-paused.
"

_usage() {
    if [[ $2 -ne 0 ]]; then
        echo "$1" >&2
        exit "$2"
    fi
    echo "$1"
    exit 0
}

add_xcompile_cmds()
{
  local arch="$1"
  if [[ -v VERBOSE ]]; then
    echo "toolchain_ctl arch_wget ${arch} && toolchain_ctl arch_env ${arch}"
  fi
}

get_krc_opts()
{
  local short="x:e:v:h"
  local long="cross-compile:,env:,verbose:,skip-wait,help"
  local active_env="kernel_base"

  if ! tmp=$(getopt -o "$short" --long "$long" -n "$BASENAME" -- "$@"); then
    exit 1
  fi
  eval set -- "$tmp"
  unset tmp

  while true; do
    case "$1" in
      '-x' | '--cross-compile' )
        xcomp_arch=$2; shift 2
        ;;

      '-e' | '--env' )
        ENV_URL="${ENVS_GIT_REPO}\?dir=$2"; shift 2
        ;;

      '--skip-wait' )
        skip_wait=1; shift
        ;;

      '-h' | '--help' )
        _usage "${USAGE}" 0
        ;;

      '-v' | '--verbose' )
        VERBOSE=1; shift 2
        ;;

      '--' )
        shift 1; break
        ;;

      * )
        _usage "${USAGE}" 1
        ;;

    esac
  done

  shift $((OPTIND -1))
  # Make sure args are: "$@ = HOST COMMAND"
  if [ $# -lt 2 ]; then
    echo "Error: You are missing an argument"
    _usage "${USAGE}" 1
  fi

  HOST=$1; shift 1;

  # Update args after filtering out [OPTIONS]
  cmd_args="$@"

  if [[ -v xcomp_arch ]]; then
    cmd_args="$(add_xcompile_cmds ${xcomp_arch}) && ${cmd_args}"
  fi

  if [[ ! -v ENV_URL ]]; then
    ENV_URL="${ENVS_GIT_REPO}\?dir=kernel_base"
  fi

  MUT_SESS_NAME="$(pwd | sed "s./..g")${HOST}"

  HEREDOC_SCRIPT="
    # Adjust PATH for non-login shells that connect to non-nix hosts
    # with nix packages installed
    if ! echo \$PATH | grep 'nix.profile' > /dev/null ; then
      PATH="~/.nix-profile/bin:/nix/var/nix/profiles/default/bin:\$PATH"
    fi

    eval ${KBUILD_ENVS}
    cd ${PWD} && nix develop ${ENV_URL} --command bash -c "${cmd_args}"
  "
}

mutagen_cmd()
{
  local cmd=$1

  if [[ -v VERBOSE ]]; then
    echo ${cmd}
  fi
  eval ${cmd}
  if [ $? != 0 ]; then
    _usage "${USAGE}" 1
  fi
}

mutagen_sync_pause()
{
  local sess=$1
  local cmd="mutagen sync resume ${sess} \
    && mutagen sync flush ${sess} \
    && mutagen sync pause ${sess}"
  mutagen_cmd "${cmd}"
}

mutagen_sync_nopause()
{
  local sess=$1
  local cmd="mutagen sync resume ${sess} \
    && mutagen sync flush --skip-wait ${sess}"
  mutagen_cmd "${cmd}"

}

remote_exec()
{
  mutagen_sync_pause ${MUT_SESS_NAME}

  ssh ${HOST} << EOF
  ${HEREDOC_SCRIPT}
EOF

  if [[ -v skip_wait ]]; then
    mutagen_sync_nopause ${MUT_SESS_NAME}
  else
    mutagen_sync_pause ${MUT_SESS_NAME}
  fi
}

local_exec()
{
  bash << EOF
  ${HEREDOC_SCRIPT}
EOF
}

get_krc_opts "$@"

if [[ ${HOST} == "localhost" ]]; then
  local_exec
else
  remote_exec
fi

