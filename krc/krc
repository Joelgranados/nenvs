#!/usr/bin/env bash

PWD=$(pwd)
KERN_URL="github:Joelgranados/nix_envs\?dir=_kernel"
BASENAME="$(basename "${BASH_SOURCE[0]}")"
USAGE="
Usage: ${BASENAME} [OPTIONS] <HOST> -- <COMMAND>

  Execute <COMMAND> in <HOST> through ssh connection.
  A mutagen session for PWD must exist.

HOST      Name of ssh-able host
COMMAND   Command to append

OPTIONS:
  -x, --cross-compile <ARCH>    Setup a cross-compilation environment for ARCH
                                just before executing <COMMAND>. Architecture
                                strings that work for Linux's ARCH argument should
                                work here.
"

_usage() {
    if [[ $2 -ne 0 ]]; then
        echo "$1" >&2
        exit "$2"
    fi
    echo "$1"
    exit 0
}

get_krc_opts()
{
  local short="x:h"
  local long="cross-compile:help"

  if ! tmp=$(getopt -o "$short" --long "$long" -n "$BASENAME" -- "$@"); then
    exit 1
  fi
  eval set -- "$tmp"
  unset tmp

  while true; do
    case "$1" in
      '-x' | '--cross-compile' )
        xcomp_arch=$2; shift 2
        ;;

      '-h' | '--help' )
        _usage "${USAGE}" 0
        ;;

      '--' )
        shift 1; break
        ;;

      * )
        _usage "${USAGE}" 1
        ;;

    esac
  done

  shift $((OPTIND -1))
  # Make sure args are: "$@ = HOST COMMAND"
  if [ $# -lt 2 ]; then
    echo "Error: You are missing an argument"
    _usage "${USAGE}" 1
  fi

  HOST=$1; shift 1;

  # Update args after filtering out [OPTIONS]
  cmd_args="$@"
}

mutagen_sync()
{
  local sess=$1
  local cmd="mutagen sync resume ${sess} \
    && mutagen sync flush ${sess} \
    && mutagen sync pause ${sess}"
  echo ${cmd}
  eval ${cmd}
  if [ $? != 0 ]; then # FIXIT: Extend to check for host equivalence
    _usage "${USAGE}" 1
  fi
}

if [ $# -lt 2 ]; then
  _usage "${USAGE}" 1
fi
HOST=$1; shift 1;
MUT_SESS_NAME="$(pwd | sed "s./..g")${HOST}"

mutagen_sync ${MUT_SESS_NAME}

CMD="ssh ${HOST} \"(cd ${PWD} && nix develop ${KERN_URL} --command $@)\""
echo ${CMD}
eval ${CMD}

mutagen_sync ${MUT_SESS_NAME}

